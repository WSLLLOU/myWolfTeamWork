cmake_minimum_required(VERSION 2.6)

project(main)

add_definitions(-std=c++14)
add_definitions(-DAPI_EXPORTS)
option(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_BUILD_TYPE Debug)

# Find and add opencv as required
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
link_libraries(${OpenCV_LIBS})
# cuda
find_package(CUDA REQUIRED)
include_directories(/usr/local/cuda/include)
link_directories(/usr/local/cuda/lib64)
# tensorrt
include_directories(/usr/include/x86_64-linux-gnu/)
link_directories(/usr/lib/x86_64-linux-gnu/)
# cqqzmq
find_package(cppzmq)

# camera
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/camera/)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/module/camera/fmt)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/camera//fmt/include)
add_library(mv_video_capture ${CMAKE_CURRENT_SOURCE_DIR}/module/camera/mv_video_capture.cpp)
include_directories(camera)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/camera/utils/)
target_link_libraries(mv_video_capture
    PUBLIC
    fmt::fmt
    ${OpenCV_LIBS}
    ${CMAKE_CURRENT_SOURCE_DIR}/module/camera/x64/libMVSDK.so
)

# get_warp_matrix
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/)

# TensorRTx
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/model/TensorRTx/)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Ofast -g -Wfatal-errors -D_MWAITXINTRIN_H_INCLUDED")
cuda_add_library(myplugins SHARED ${CMAKE_CURRENT_SOURCE_DIR}/module/model/TensorRTx/yololayer.cu) # 生成动态库 myplugins
target_link_libraries(myplugins nvinfer cudart)

# 生成/×可×执×行×文×件×/ 动态库√ yolo, 基于calibrator.cpp preprocess.cu
cuda_add_library(yolo SHARED ${CMAKE_CURRENT_SOURCE_DIR}/module/model/TensorRTx/calibrator.cpp ${CMAKE_CURRENT_SOURCE_DIR}/module/model/TensorRTx/preprocess.cu) 
# 把nvinfer、cudart、myplugins 和 opencv库 -->(链接到) yolo
target_link_libraries(yolo nvinfer)
target_link_libraries(yolo cudart)
target_link_libraries(yolo myplugins)
target_link_libraries(yolo ${OpenCV_LIBS})

# position
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/position/)
cuda_add_library(position SHARED ${CMAKE_CURRENT_SOURCE_DIR}/module/position/position.cpp)

# watchtower
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/watchtower/)
cuda_add_library(watchtower SHARED ${CMAKE_CURRENT_SOURCE_DIR}/module/watchtower/watchtower.cpp)

# msgs
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/msgs/)
cuda_add_library(msgs SHARED ${CMAKE_CURRENT_SOURCE_DIR}/module/msgs/msgs.cpp)

# visualize
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/module/visualize/)
cuda_add_library(visualize SHARED ${CMAKE_CURRENT_SOURCE_DIR}/module/visualize/visualize.cpp)

# thread
find_package(Threads)

# main
add_executable(main main.cpp)
# link
target_link_libraries(main
    mv_video_capture
    yolo 
    position 
    watchtower 
    msgs
    visualize
    cppzmq
    ${OpenCV_LIBS}
    ${CMAKE_THREAD_LIBS_INIT}
)